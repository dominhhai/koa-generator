#!/usr/bin/env node

var program = require('commander');
var mkdirp = require('mkdirp');
var os = require('os');
var fs = require('fs');
var path = require('path');
var readline = require('readline');
var sortedObject = require('sorted-object');

var _exit = process.exit;
var eol = os.EOL;
var pkg = require('../package.json');

var version = pkg.version;
var templatesPath = path.resolve(__dirname, '..', 'templates')

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = exit

// CLI

before(program, 'outputHelp', function () {
  this.allowUnknownOption();
});

program
  .version(version)
  .usage('[options] [dir]')
  .option('-1, --koa1', 'use Koa v1.x (defaults to Koa v2.x)')
  .option('-b, --babel', 'use babel for Koa v2.x')
  .option('-e, --ejs', 'add ejs engine support (defaults to jade)')
  .option('    --hbs', 'add handlebars engine support')
  .option('-H, --hogan', 'add hogan.js engine support')
  .option('-c, --css <engine>', 'add stylesheet <engine> support (less|stylus|compass|sass) (defaults to plain css)')
  .option('    --git', 'add .gitignore')
  .option('-f, --force', 'force on non-empty directory')
  .parse(process.argv);

if (!exit.exited) {
  main();
}

/**
 * Install a before function; AOP.
 */

function before(obj, method, fn) {
  var old = obj[method];

  obj[method] = function () {
    fn.call(this);
    old.apply(this, arguments);
  };
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */

function confirm(msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(msg, function (input) {
    rl.close();
    callback(/^y|yes|ok|true$/i.test(input));
  });
}

/**
 * Create application at the given directory `dir`.
 *
 * @param {String} dir
 */

function createApplication(app_name, dir) {
  var wait = 5;

  console.log();
  function complete() {
    if (--wait) return;
    var prompt = launchedFromCmd() ? '>' : '$';

    console.log();
    console.log('   install dependencies:');
    console.log('     %s cd %s && npm install', prompt, dir);
    console.log();
    console.log('   run the app:');

    if (launchedFromCmd()) {
      console.log('     %s SET DEBUG=%s:* & npm start', prompt, app_name);
    } else {
      console.log('     %s DEBUG=%s:* npm start', prompt, app_name);
    }

    console.log();
  }

  // JavaScript
  var app = loadTemplate('js/app.js');
  var www = loadTemplate('js/www');
  var log4js = loadTemplate('js/log4js.json');
  var gulpfile = loadTemplate('js/gulpfile.js');
  var index = loadTemplate('js/routes/index.js');
  var users = loadTemplate('js/routes/users.js');

  // CSS
  var css = loadTemplate('css/style.css');
  var less = loadTemplate('css/style.less');
  var stylus = loadTemplate('css/style.styl');
  var compass = loadTemplate('css/style.scss');
  var sass = loadTemplate('css/style.sass');

  mkdir(dir, function(){
    mkdir(dir + '/public');
    mkdir(dir + '/public/javascripts');
    mkdir(dir + '/public/images');
    mkdir(dir + '/public/stylesheets', function(){
      switch (program.css) {
        case 'less':
          write(dir + '/public/stylesheets/style.less', less);
          break;
        case 'stylus':
          write(dir + '/public/stylesheets/style.styl', stylus);
          break;
        case 'compass':
          write(dir + '/public/stylesheets/style.scss', compass);
          break;
        case 'sass':
          write(dir + '/public/stylesheets/style.sass', sass);
          break;
        default:
          write(dir + '/public/stylesheets/style.css', css);
      }
      complete();
    });

    mkdir(dir + '/routes', function(){
      write(dir + '/routes/index.js', index);
      write(dir + '/routes/users.js', users);
      complete();
    });

    mkdir(dir + '/views', function(){
      switch (program.template) {
        case 'ejs':
          copy_template('ejs/index.ejs', dir + '/views/index.ejs');
          copy_template('ejs/error.ejs', dir + '/views/error.ejs');
          break;
        case 'jade':
          copy_template('jade/index.jade', dir + '/views/index.jade');
          copy_template('jade/layout.jade', dir + '/views/layout.jade');
          copy_template('jade/error.jade', dir + '/views/error.jade');
          break;
        case 'hjs':
          copy_template('hogan/index.hjs', dir + '/views/index.hjs');
          copy_template('hogan/error.hjs', dir + '/views/error.hjs');
          break;
        case 'hbs':
          copy_template('hbs/index.hbs', dir + '/views/index.hbs');
          copy_template('hbs/layout.hbs', dir + '/views/layout.hbs');
          copy_template('hbs/error.hbs', dir + '/views/error.hbs');
          break;
      }
      complete();
    });

    // Babel for Koa v2.x
    if (program.babel) {
      www = www.replace('{babel}', eol +
`require('babel-core/register')({
  presets: ['es2015-node5', 'stage-3']
})`)
    } else {
      www = www.replace('{babel}', '')
    }

    // CSS Engine support
    switch (program.css) {
      case 'less':
        app = app.replace('{css}', eol + 'app.use(require(\'less-middleware\')(path.join(__dirname, \'public\')))');
        break;
      case 'stylus':
        app = app.replace('{css}', eol + 'app.use(require(\'stylus\').middleware(path.join(__dirname, \'public\')))');
        break;
      case 'compass':
        app = app.replace('{css}', eol + 'app.use(require(\'node-compass\')({mode: \'expanded\'}))');
        break;
      case 'sass':
        app = app.replace('{css}', eol + 'app.use(require(\'node-sass-middleware\')({\n  src: path.join(__dirname, \'public\'),\n  dest: path.join(__dirname, \'public\'),\n  indentedSyntax: true,\n  sourceMap: true\n}))');
        break;
      default:
        app = app.replace('{css}', '');
    }

    // Template support
    app = app.replace('{views}', program.template);

    // package.json
    var pkg = {
        name: app_name
      , version: '0.0.0'
      , private: true
      , scripts: {
        start: 'node ./bin/www',
        test: 'gulp'
      }
      , dependencies: {
          "co": "^4.6.0"
      }
      , devDependencies: {
          "del": "^2.2.0",
          "gulp": "^3.9.1",
          "gulp-concat": "^2.6.0",
          "gulp-cssmin": "^0.1.7",
          "gulp-nodemon": "^2.0.6",
          "gulp-sourcemaps": "^1.6.0",
          "gulp-uglify": "^1.5.3"
      }
    }
    pkg.dependencies = (program.koa1)
                                          ? {
                                              "co": "^4.6.0",
                                              "koa": "^1.1.2",
                                              "koa-bodyparser": "^2.0.1",
                                              "koa-json": "^1.1.1",
                                              "koa-log4": "^1.0.1",
                                              "koa-onerror": "^1.2.1",
                                              "koa-router": "^5.3.0",
                                              "koa-static": "^1.5.2",
                                              "koa-views": "^3.1.0"
                                          }
                                        : {
                                            "co": "^4.6.0",
                                            "koa": "^2.0.0",
                                            "koa-bodyparser": "^3.0.0",
                                            "koa-json": "^2.0.0",
                                            "koa-log4": "^2.0.1",
                                            "koa-onerror": "^1.2.1",
                                            "koa-router": "^7.0.0",
                                            "koa-static": "^3.0.0",
                                            "koa-views": "^5.0.1"
                                          }

    switch (program.template) {
      case 'jade':
        pkg.dependencies['jade'] = '~1.11.0';
        break;
      case 'ejs':
        pkg.dependencies['ejs'] = '~2.4.1';
        break;
      case 'hjs':
        pkg.dependencies['hjs'] = '~0.0.6';
        break;
      case 'hbs':
        pkg.dependencies['hbs'] = '~4.0.0';
        break;
      default:
    }

    // CSS Engine support
    switch (program.css) {
      case 'less':
        pkg.dependencies['less-middleware'] = '1.0.x';
        break;
      case 'compass':
        pkg.dependencies['node-compass'] = '0.2.3';
        break;
      case 'stylus':
        pkg.dependencies['stylus'] = '0.42.3';
        break;
      case 'sass':
        pkg.dependencies['node-sass-middleware'] = '0.8.0';
        break;
      default:
    }

    // Babel for Koa v2.x
    if (program.babel) {
      pkg.dependencies['babel-core'] = '^6.7.7'
      pkg.dependencies['babel-preset-es2015-node5'] = '^1.2.0'
      pkg.dependencies['babel-preset-stage-3'] = '^6.5.0'
    }

    // sort dependencies like npm(1)
    pkg.dependencies = sortedObject(pkg.dependencies);

    // write files
    write(dir + '/package.json', JSON.stringify(pkg, null, 2));
    write(dir + '/log4js.json', log4js);
    write(dir + '/app.js', app);
    write(dir + '/gulpfile.js', gulpfile);
    mkdir(dir + '/bin', function(){
      www = www.replace('{name}', app_name);
      write(dir + '/bin/www', www, 0755);
      complete();
    });

    if (program.git) {
      write(dir + '/.gitignore', fs.readFileSync(path.join(templatesPath, 'js', 'gitignore'), 'utf-8'));
    }

    complete();
  });
}

function copy_template(from, to) {
  from = path.join(templatesPath, from);
  write(to, fs.readFileSync(from, 'utf-8'));
}

/**
 * Check if the given directory `dir` is empty.
 *
 * @param {String} dir
 * @param {Function} fn
 */

function emptyDirectory(dir, fn) {
  fs.readdir(dir, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * Graceful exit for async STDIO
 */

function exit(code) {
  // flush output for Node.js Windows pipe bug
  // https://github.com/joyent/node/issues/6247 is just one bug example
  // https://github.com/visionmedia/mocha/issues/333 has a good discussion
  function done() {
    if (!(draining--)) _exit(code);
  }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function(stream){
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}

/**
 * Determine if launched from cmd.exe
 */

function launchedFromCmd() {
  return process.platform === 'win32'
    && process.env._ === undefined;
}

/**
 * Load template file.
 */

function loadTemplate(name) {
  return fs.readFileSync(path.join(templatesPath, name), 'utf-8');
}

/**
 * Main program.
 */

function main() {
  // Path
  var destinationPath = program.args.shift() || '.';

  // App name
  var appName = path.basename(path.resolve(destinationPath));

  // Koa version
  program.koa = '2'
  if (program.koa1) program.koa = '1'
  templatesPath += program.koa
  
  // Babel
  if (program.koa1) program.babel = false

  // Template engine
  program.template = 'jade';
  if (program.ejs) program.template = 'ejs';
  if (program.hogan) program.template = 'hjs';
  if (program.hbs) program.template = 'hbs';

  // Generate application
  emptyDirectory(destinationPath, function (empty) {
    if (empty || program.force) {
      createApplication(appName, destinationPath);
    } else {
      confirm('destination is not empty, continue? [y/N] ', function (ok) {
        if (ok) {
          process.stdin.destroy();
          createApplication(appName, destinationPath);
        } else {
          console.error('aborting');
          exit(1);
        }
      });
    }
  });
}

/**
 * echo str > dir.
 *
 * @param {String} dir
 * @param {String} str
 */

function write(dir, str, mode) {
  fs.writeFileSync(dir, str, { mode: mode || 0666 });
  console.log('   \x1b[36mcreate\x1b[0m : ' + dir);
}

/**
 * Mkdir -p.
 *
 * @param {String} dir
 * @param {Function} fn
 */

function mkdir(dir, fn) {
  mkdirp(dir, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + dir);
    fn && fn();
  });
}
